#!/bin/bash

# Init node vars
source /scripts/init_node_vars

walletName="$1" # eg. wallet/name/name
mkdir -p ${NODE_PATH}/staking/wallets/${walletName}
cd ${NODE_PATH}/staking/wallets/${walletName}

#if [ -f "phrase.txt"   ]; then echo -e "\033[35mWARNING - phrase.txt already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "root.prv"     ]; then echo -e "\033[35mWARNING - root.prv already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "payment.xprv" ]; then echo -e "\033[35mWARNING - payment.xprv already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "payment.xpub" ]; then echo -e "\033[35mWARNING - payment.xpub already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "stake.xprv" ]; then echo -e "\033[35mWARNING - stake.xprv already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "stake.xpub" ]; then echo -e "\033[35mWARNING - stake.xpub already present, delete it or use another name !\033[0m"; exit 2; fi
if [ -f "stake.xpub" ]; then echo -e "\033[35mWARNING - stake.xpub already present, delete it or use another name !\033[0m"; exit 2; fi

echo
if [ -f "phrase.txt"   ]; then
  echo "Phrase already present. Generating keys from phrase."
else
  echo "Generate Recovery Phrase: ${walletName}"
  cardano-address recovery-phrase generate --size 24 > phrase.txt
fi

echo
echo "Generate Root Key: ${walletName}"
cat phrase.txt   | cardano-address key from-recovery-phrase Shelley > root.prv

echo
echo "Generate Private Keys: ${walletName}"
cat root.prv     | cardano-address key child 1852H/1815H/0H/0/0 > payment.xprv
cat payment.xprv | cardano-address key public --with-chain-code > payment.xpub
cat root.prv     | cardano-address key child 1852H/1815H/0H/2/0 > stake.xprv
cat stake.xprv | cardano-address key public --with-chain-code > stake.xpub

echo
echo "Generate Payment Address: ${walletName}"
cat payment.xpub | cardano-address address payment --network-tag ${NETWORK_TAG} > candidate.addr

echo
echo "Generate Staking Address: ${walletName}"
cat candidate.addr | cardano-address address delegation $(cat stake.xpub) > payment.candidate.addr

echo
echo "$(cat candidate.addr)"
echo "$(cat payment.candidate.addr)"
cat payment.xprv | cardano-address key inspect
cat payment.xpub | cardano-address key inspect

cat stake.xprv | cardano-address key inspect
cat stake.xpub | cardano-address key inspect

cat candidate.addr         | cardano-address address inspect
cat payment.candidate.addr | cardano-address address inspect

# XPrv/XPub conversion to normal private and public key, keep in mind the
# keypars are not a valid Ed25519 signing keypairs.
SESKEY=$(cat stake.xprv | bech32 | cut -b -128 )$(cat stake.xpub | bech32)
PESKEY=$(cat payment.xprv | bech32 | cut -b -128 )$(cat payment.xpub | bech32)

cat << EOF > stake.skey
{
    "type": "StakeExtendedSigningKeyShelley_ed25519_bip32",
    "description": "",
    "cborHex": "5880$SESKEY"
}
EOF

cat << EOF > payment.skey
{
    "type": "PaymentExtendedSigningKeyShelley_ed25519_bip32",
    "description": "Payment Signing Key",
    "cborHex": "5880$PESKEY"
}
EOF

echo
echo "Checking whether cardano-address and cardano-cli outputs match after conversion."
cardano-cli shelley key verification-key --signing-key-file stake.skey --verification-key-file stake.evkey
cardano-cli shelley key verification-key --signing-key-file payment.skey --verification-key-file payment.evkey

cardano-cli shelley key non-extended-key --extended-verification-key-file stake.evkey --verification-key-file stake.vkey
cardano-cli shelley key non-extended-key --extended-verification-key-file payment.evkey --verification-key-file payment.vkey

cardano-cli shelley stake-address build --stake-verification-key-file   stake.vkey ${NETWORK_ARGUMENT} > stake.addr
cardano-cli shelley address       build --payment-verification-key-file payment.vkey ${NETWORK_ARGUMENT} > addr

cardano-cli shelley address build \
    --payment-verification-key-file payment.vkey \
    --stake-verification-key-file   stake.vkey \
    ${NETWORK_ARGUMENT} > payment.addr


echo
echo "Important the base.addr and the base.addr_candidate must be the same"
diff payment.addr payment.candidate.addr
echo

echo
echo $(cat candidate.addr)
echo $(cat addr)
echo

echo
echo $(cat payment.candidate.addr)
echo $(cat payment.addr)
echo

if [[ "$(cat payment.candidate.addr)" != "$(cat payment.addr)" ]]; then

  echo -e "\033[35mWARNING - payment.candidate.addr doesn't match payment.addr! Serious ERROR!!!!\033[0m"; exit 2;
fi

if [[ "$(cat candidate.addr)" != "$(cat addr)" ]]; then

  echo -e "\033[35mWARNING - candidate.addr doesn't match addr! Serious ERROR!!!!\033[0m"; exit 2;
fi